generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator js {
    provider        = "prisma-client-js"
    previewFeatures = ["extendedWhereUnique"]
}

model manager {
    id        Int      @id @default(autoincrement())
    uuid      String   @default(uuid())
    account   String   @db.VarChar(255)
    password  String   @map("password") @db.VarChar(255)
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

    sessionToken sessionToken[]
    sessionLog   sessionLog[]
}

model sessionLog {
    id        Int      @id @default(autoincrement())
    uuid      String   @default(uuid())
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

    sequence        Json
    starting        String @db.VarChar(255)
    destination     String @db.VarChar(255)
    type            String @db.VarChar(255)
    direction       String @db.VarChar(255)
    distance        Int
    travel          Int
    error           Int
    initialReaction Int    @map("initial_reaction")
    responseTime    Int    @map("response_time")

    managerId Int          @map("manager_id")
    manager   manager      @relation(fields: [managerId], references: [id])
    tokenId   Int          @map("token_id")
    token     sessionToken @relation(fields: [tokenId], references: [id], onDelete: Cascade)

    @@map("session_log")
}

model sessionToken {
    id        Int      @id @default(autoincrement())
    uuid      String   @default(uuid())
    createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()

    label      String
    gender     Int     @default(-1)
    experience Int     @default(-1)
    sequence   Json
    isFinished Boolean @default(false) @map("is_finished")

    managerId  Int          @map("manager_id")
    manager    manager      @relation(fields: [managerId], references: [id])
    sessionLog sessionLog[]

    @@map("session_token")
}
